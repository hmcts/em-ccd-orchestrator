import javax.inject.Inject
import java.nio.charset.StandardCharsets

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.5.6'
    id 'uk.gov.hmcts.java' version '0.12.67'
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'org.sonarqube' version '7.0.1.6134'
    id 'jacoco'
    id 'checkstyle'
    id 'au.com.dius.pact' version '4.6.17'
    id 'info.solidsoft.pitest' version '1.19.0-rc.2'
    id 'org.owasp.dependencycheck' version '12.1.6'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.34'
}


if (!project.hasProperty('runList')) {
    project.ext.runList = 'main'
}

group = 'uk.gov.hmcts.reform.em.orchestrator'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'uk.gov.hmcts.reform.em.orchestrator.Application'
}

def versions = [
        serenity           : '4.2.33',
        pact_version       : '4.6.17',
        mockito            : '5.20.0',
        jupiter            : '6.0.0',
        poi                : '5.4.1',
        springSecurity     : '6.5.6',
        okhttp3            : '5.2.1',
        fasterXmlJackson   : '2.20.0'
]
sourceSets {
    aat {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    test {
        java.srcDir 'src/test/java'
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    aatImplementation.extendsFrom(testImplementation)
    aatRuntimeOnly.extendsFrom(testRuntimeOnly)
}

configurations.configureEach {
    exclude group: 'com.vaadin.external.google', module: 'android-json'
    exclude group: 'org.glassfish', module: 'jakarta.el'
    exclude group: 'org.springframework.retry', module: 'spring-retry'
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
    exclude group: 'com.ibm.icu', module: 'icu4j'
    exclude group: 'org.codehaus.jettison', module: 'jettison'
}

dependencies {

    def withoutStuff = {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }

    def withoutPactExtras = {
        exclude group: 'org.jetbrains.kotlinx',   module: 'kotlinx-coroutines-io'
        exclude group: 'org.jetbrains.kotlinx',   module: 'kotlinx-io'
        exclude group: 'org.eclipse.jetty.alpn', module: 'alpn-api'
    }

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

    implementation group: 'com.google.guava', name: 'guava', version: '33.5.0-jre'
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.42'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttp3
    implementation group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: versions.okhttp3
    implementation group: "commons-io", name: "commons-io", version: "2.20.0"

    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '4.3.0'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'

    implementation group: 'pl.touk', name : 'throwing-function', version: '1.3'
    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.9.0'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.13'
    implementation group: "org.apache.commons", name: "commons-lang3", version: "3.19.0"
    implementation group: "commons-validator", name: "commons-validator", version: "1.10.0"

    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
    implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: '1.59.2'
    implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '5.2.0'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: versions.fasterXmlJackson

    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-core', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-config', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-web', version: versions.springSecurity

    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.6'
    implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '5.2.1-RELEASE'

    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', withoutStuff
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.42'
    aatAnnotationProcessor group:'org.projectlombok', name: 'lombok', version: '1.18.42'

    testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.10', classifier: 'all', {
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', withoutStuff
    testImplementation group: 'com.github.gmazzo', name:'okhttp-mock', version:'2.1.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito

    testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity, withoutStuff
    testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, withoutStuff
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenity
  
    testImplementation group: 'org.junit.jupiter', name:  'junit-jupiter-params', version: versions.jupiter
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.jupiter
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.jupiter

    aatImplementation group: 'org.apache.poi', name: 'poi', version: versions.poi
    aatImplementation group: 'org.apache.poi', name: 'poi-ooxml', version: versions.poi
    aatRuntimeOnly group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.4'
    aatRuntimeOnly group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.6'
    
    //pact contract testing


    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version

    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
    contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'


    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.jupiter

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath

    aatImplementation group: 'com.github.hmcts', name: 'em-test-helper', version:'2.3.0'
}

dependencyManagement {
    dependencies {
        //CVE-2022-23437
        dependencySet(group: 'xerces', version: '2.12.2') {
            entry 'xercesImpl'
        }

        //CVE-2022-1471
        dependencySet(group: 'org.yaml', version: '2.5') {
            entry 'snakeyaml'
        }

        // CVE-2023-6378
        dependencySet(group: 'ch.qos.logback', version: '1.5.20') {
            entry 'logback-classic'
            entry 'logback-core'
        }

        dependencySet(group: 'org.junit.platform', version: '6.0.0') {
            entry 'junit-platform-commons'
            entry 'junit-platform-engine'
        }
    }
}

checkstyle {
//    ignoreFailures = true
    toolVersion = '12.1.0'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}


checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencyCheck {
    suppressionFile = 'config/owasp/dependency-check-suppressions.xml'
}

bootJar {
    getArchiveFileName().set(provider {
        'rpa-em-ccd-orchestrator.jar'
    })
    destinationDirectory = file("$rootDir/build/libs")
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

def coverageExclusionList = [
        '**uk/gov/hmcts/reform/em/orchestrator/Application*',
        '**uk/gov/hmcts/reform/em/orchestrator/config/**/*',
        '**uk/gov/hmcts/reform/em/orchestrator/domain/*',
        '**uk/gov/hmcts/reform/em/orchestrator/stitching/dto/*',
        '**uk/gov/hmcts/reform/em/orchestrator/info/*',
        '**uk/gov/hmcts/reform/em/orchestrator/service/dto/*',
        '**uk/gov/hmcts/reform/em/orchestrator/service/ccdcallbackhandler/CdamDetailsDto*',
        '**uk/gov/hmcts/reform/em/orchestrator/service/ccdcallbackhandler/CcdCallbackResponseDto*',
]

jacocoTestReport {
    executionData(test)

    reports {
        xml.required = true
        csv.required = false

        xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.em.orchestrator.*']
    excludedClasses = [
            'uk.gov.hmcts.reform.em.orchestrator.domain.*' ,
            'uk.gov.hmcts.reform.em.orchestrator.config.*',
            'uk.gov.hmcts.reform.em.orchestrator.info.*',
            'uk.gov.hmcts.reform.em.orchestrator.Application.java',
    ]

    enableDefaultIncrementalAnalysis = true
    historyInputLocation = 'build/reports/pitest/fastermutationtesting'
    historyOutputLocation ='build/reports/pitest/fastermutationtestingoutput'
    threads = 15
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    fileExtensionsToFilter.addAll('xml','json')
    outputFormats = ['XML', 'HTML','CSV']
    mutationThreshold = 5
    coverageThreshold = 0
    jvmArgs = ['-Xms1G','-Xmx3G']
    timestampedReports = false
    failWhenNoMutations = false
    detectInlinedCode = true

    junit5PluginVersion = '1.2.1'
    pitestVersion = '1.17.3'
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
        property "sonar.exclusions", coverageExclusionList.join(", ")
        property "sonar.test.exclusions", "**/test/**"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"

        property "sonar.issue.ignore.multicriteria", "e1"
        property "sonar.issue.ignore.multicriteria.e1.ruleKey", "java:S2629"
        property "sonar.issue.ignore.multicriteria.e1.resourceKey", "src/main/java/uk/gov/hmcts/reform/em/orchestrator/**"
    }
}

configurations {
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntimeOnly.extendsFrom testRuntimeOnly
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
    useJUnitPlatform()
}

tasks.register('functional', Test) {
    group = 'Delivery pipeline'
    description = 'Executes functional tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/orchestrator/functional/**"

    testLogging {
        exceptionFormat = 'full'
    }
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")

    useJUnitPlatform()
}

// Serenity Single page Reports
// functional.finalizedBy(aggregate)

tasks.register('smoke', Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/orchestrator/smoke/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")

    useJUnitPlatform()
}

tasks.register('validateYaml', JavaExec) {
    description = "Validate the automated bundling YAML configuration"
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("uk.gov.hmcts.reform.em.orchestrator.Application")
    systemProperty 'spring.main.web-application-type', 'NONE'
    systemProperty 'spring.profiles.active', 'validate'
}

compileJava.dependsOn processResources

project.ext {
    pacticipantVersion = getCheckedOutGitCommitHash()
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}


tasks.register('contract', Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include '**/consumer/**'
    systemProperty 'pact.rootDir', "pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    }
    publish {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        pactDirectory = 'pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        consumerBranch = System.getenv("PACT_BRANCH_NAME") ?: 'Dev'
        version = project.pacticipantVersion
    }
}

pactPublish {
    pactPublish = project.pact.publish
}

tasks.register('runAndPublishConsumerPactTests', Test) {
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang=ALL-UNNAMED']
    useJUnitPlatform()
}

runAndPublishConsumerPactTests.dependsOn contract
runAndPublishConsumerPactTests.finalizedBy pactPublish

tasks.register('providerContractTests', Test) {
    description = 'Runs ONLY the provider Pact verification tests.'
    group = 'Verification'

    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

    include '**/provider/**'
}

// Centralized Pact system property setup for all Test tasks
tasks.withType(Test).configureEach { t ->
    // Logging setup
    testLogging {
        exceptionFormat = 'full'
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        events "passed", "skipped", "failed", "standard_out", "standard_error"
    }

    if (project.hasProperty('pact.verifier.publishResults')) {
        systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
    }
    if (project.hasProperty('pact.provider.version')) {
        systemProperty 'pact.provider.version', project.property('pact.provider.version')
    } else {
        systemProperty 'pact.provider.version', project.pacticipantVersion
    }

    if (project.hasProperty('pact.provider.branch')) {
        systemProperty 'pact.provider.branch', project.property('pact.provider.branch')
    } else {
        systemProperty 'pact.provider.branch', System.getenv("PACT_BRANCH_NAME") ?: "Dev"
    }

    doFirst {
        println "--- Running '${t.name}' ---"
        println "System properties for this run: ${systemProperties}"
    }
}

tasks.register('runProviderPactVerification') {
    description = 'Entry point for Jenkins to run provider contract tests.'
    group = 'Verification'

    dependsOn tasks.named('providerContractTests')
}


tasks.register('fortifyScan', JavaExec) {
    mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

interface ExecOperationsProvider {
    @Inject
    ExecOperations getExecOperations()
}

tasks.register('loadEnvSecrets') {
    doLast {
        if (!project.file('./.aat-env').exists()) {
            def execOps = project.objects.newInstance(ExecOperationsProvider).getExecOperations()

            new ByteArrayOutputStream().withStream { os ->
                execOps.exec {
                    commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'em-ccdorc-aat', '-o', 'tsv', '--query', 'value', '--name', 'em-ccdorc-dot-env'
                    standardOutput = os
                }
                project.file('./.aat-env').write(new String(os.toString().replace('\n', '').decodeBase64(), StandardCharsets.UTF_8))
            }
        }
    }
}

bootRun {
    dependsOn(loadEnvSecrets)

    doFirst() {
        if (project.file('./.aat-env').exists()) {
            project.file('./.aat-env').readLines().each() {
                def index = it.indexOf("=")
                def key = it.substring(0, index)
                def value = it.substring(index + 1)
                environment key, value
            }
        }
    }
}

functional {
    doFirst() {
        if (project.file('./.aat-env').exists()) {
            project.file('./.aat-env').readLines().each() {
                def index = it.indexOf("=")
                def key = it.substring(0, index)
                def value = it.substring(index + 1)
                environment key, value
            }
        }
    }
}
